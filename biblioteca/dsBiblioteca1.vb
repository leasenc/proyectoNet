'------------------------------------------------------------------------------
' <autogenerated>
'     This code was generated by a tool.
'     Runtime Version: 1.0.3705.0
'
'     Changes to this file may cause incorrect behavior and will be lost if 
'     the code is regenerated.
' </autogenerated>
'------------------------------------------------------------------------------

Option Strict Off
Option Explicit On

Imports System
Imports System.Data
Imports System.Runtime.Serialization
Imports System.Xml


<Serializable(),  _
 System.ComponentModel.DesignerCategoryAttribute("code"),  _
 System.Diagnostics.DebuggerStepThrough(),  _
 System.ComponentModel.ToolboxItem(true)>  _
Public Class dsBiblioteca1
    Inherits DataSet
    
    Private tableCarne As CarneDataTable
    
    Private tableLibro As LibroDataTable
    
    Private tableTipo_Usuario As Tipo_UsuarioDataTable
    
    Private tableTema As TemaDataTable
    
    Private tableOUsuario As OUsuarioDataTable
    
    Private tableOEmpleado As OEmpleadoDataTable
    
    Private tableOFicha_de_Prestamo As OFicha_de_PrestamoDataTable
    
    Private tableDevolucion As DevolucionDataTable
    
    Public Sub New()
        MyBase.New
        Me.InitClass
        Dim schemaChangedHandler As System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler Me.Tables.CollectionChanged, schemaChangedHandler
        AddHandler Me.Relations.CollectionChanged, schemaChangedHandler
    End Sub
    
    Protected Sub New(ByVal info As SerializationInfo, ByVal context As StreamingContext)
        MyBase.New
        Dim strSchema As String = CType(info.GetValue("XmlSchema", GetType(System.String)),String)
        If (Not (strSchema) Is Nothing) Then
            Dim ds As DataSet = New DataSet
            ds.ReadXmlSchema(New XmlTextReader(New System.IO.StringReader(strSchema)))
            If (Not (ds.Tables("Carne")) Is Nothing) Then
                Me.Tables.Add(New CarneDataTable(ds.Tables("Carne")))
            End If
            If (Not (ds.Tables("Libro")) Is Nothing) Then
                Me.Tables.Add(New LibroDataTable(ds.Tables("Libro")))
            End If
            If (Not (ds.Tables("Tipo_Usuario")) Is Nothing) Then
                Me.Tables.Add(New Tipo_UsuarioDataTable(ds.Tables("Tipo_Usuario")))
            End If
            If (Not (ds.Tables("Tema")) Is Nothing) Then
                Me.Tables.Add(New TemaDataTable(ds.Tables("Tema")))
            End If
            If (Not (ds.Tables("OUsuario")) Is Nothing) Then
                Me.Tables.Add(New OUsuarioDataTable(ds.Tables("OUsuario")))
            End If
            If (Not (ds.Tables("OEmpleado")) Is Nothing) Then
                Me.Tables.Add(New OEmpleadoDataTable(ds.Tables("OEmpleado")))
            End If
            If (Not (ds.Tables("OFicha_de_Prestamo")) Is Nothing) Then
                Me.Tables.Add(New OFicha_de_PrestamoDataTable(ds.Tables("OFicha_de_Prestamo")))
            End If
            If (Not (ds.Tables("Devolucion")) Is Nothing) Then
                Me.Tables.Add(New DevolucionDataTable(ds.Tables("Devolucion")))
            End If
            Me.DataSetName = ds.DataSetName
            Me.Prefix = ds.Prefix
            Me.Namespace = ds.Namespace
            Me.Locale = ds.Locale
            Me.CaseSensitive = ds.CaseSensitive
            Me.EnforceConstraints = ds.EnforceConstraints
            Me.Merge(ds, false, System.Data.MissingSchemaAction.Add)
            Me.InitVars
        Else
            Me.InitClass
        End If
        Me.GetSerializationData(info, context)
        Dim schemaChangedHandler As System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler Me.Tables.CollectionChanged, schemaChangedHandler
        AddHandler Me.Relations.CollectionChanged, schemaChangedHandler
    End Sub
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property Carne As CarneDataTable
        Get
            Return Me.tableCarne
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property Libro As LibroDataTable
        Get
            Return Me.tableLibro
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property Tipo_Usuario As Tipo_UsuarioDataTable
        Get
            Return Me.tableTipo_Usuario
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property Tema As TemaDataTable
        Get
            Return Me.tableTema
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property OUsuario As OUsuarioDataTable
        Get
            Return Me.tableOUsuario
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property OEmpleado As OEmpleadoDataTable
        Get
            Return Me.tableOEmpleado
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property OFicha_de_Prestamo As OFicha_de_PrestamoDataTable
        Get
            Return Me.tableOFicha_de_Prestamo
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property Devolucion As DevolucionDataTable
        Get
            Return Me.tableDevolucion
        End Get
    End Property
    
    Public Overrides Function Clone() As DataSet
        Dim cln As dsBiblioteca1 = CType(MyBase.Clone,dsBiblioteca1)
        cln.InitVars
        Return cln
    End Function
    
    Protected Overrides Function ShouldSerializeTables() As Boolean
        Return false
    End Function
    
    Protected Overrides Function ShouldSerializeRelations() As Boolean
        Return false
    End Function
    
    Protected Overrides Sub ReadXmlSerializable(ByVal reader As XmlReader)
        Me.Reset
        Dim ds As DataSet = New DataSet
        ds.ReadXml(reader)
        If (Not (ds.Tables("Carne")) Is Nothing) Then
            Me.Tables.Add(New CarneDataTable(ds.Tables("Carne")))
        End If
        If (Not (ds.Tables("Libro")) Is Nothing) Then
            Me.Tables.Add(New LibroDataTable(ds.Tables("Libro")))
        End If
        If (Not (ds.Tables("Tipo_Usuario")) Is Nothing) Then
            Me.Tables.Add(New Tipo_UsuarioDataTable(ds.Tables("Tipo_Usuario")))
        End If
        If (Not (ds.Tables("Tema")) Is Nothing) Then
            Me.Tables.Add(New TemaDataTable(ds.Tables("Tema")))
        End If
        If (Not (ds.Tables("OUsuario")) Is Nothing) Then
            Me.Tables.Add(New OUsuarioDataTable(ds.Tables("OUsuario")))
        End If
        If (Not (ds.Tables("OEmpleado")) Is Nothing) Then
            Me.Tables.Add(New OEmpleadoDataTable(ds.Tables("OEmpleado")))
        End If
        If (Not (ds.Tables("OFicha_de_Prestamo")) Is Nothing) Then
            Me.Tables.Add(New OFicha_de_PrestamoDataTable(ds.Tables("OFicha_de_Prestamo")))
        End If
        If (Not (ds.Tables("Devolucion")) Is Nothing) Then
            Me.Tables.Add(New DevolucionDataTable(ds.Tables("Devolucion")))
        End If
        Me.DataSetName = ds.DataSetName
        Me.Prefix = ds.Prefix
        Me.Namespace = ds.Namespace
        Me.Locale = ds.Locale
        Me.CaseSensitive = ds.CaseSensitive
        Me.EnforceConstraints = ds.EnforceConstraints
        Me.Merge(ds, false, System.Data.MissingSchemaAction.Add)
        Me.InitVars
    End Sub
    
    Protected Overrides Function GetSchemaSerializable() As System.Xml.Schema.XmlSchema
        Dim stream As System.IO.MemoryStream = New System.IO.MemoryStream
        Me.WriteXmlSchema(New XmlTextWriter(stream, Nothing))
        stream.Position = 0
        Return System.Xml.Schema.XmlSchema.Read(New XmlTextReader(stream), Nothing)
    End Function
    
    Friend Sub InitVars()
        Me.tableCarne = CType(Me.Tables("Carne"),CarneDataTable)
        If (Not (Me.tableCarne) Is Nothing) Then
            Me.tableCarne.InitVars
        End If
        Me.tableLibro = CType(Me.Tables("Libro"),LibroDataTable)
        If (Not (Me.tableLibro) Is Nothing) Then
            Me.tableLibro.InitVars
        End If
        Me.tableTipo_Usuario = CType(Me.Tables("Tipo_Usuario"),Tipo_UsuarioDataTable)
        If (Not (Me.tableTipo_Usuario) Is Nothing) Then
            Me.tableTipo_Usuario.InitVars
        End If
        Me.tableTema = CType(Me.Tables("Tema"),TemaDataTable)
        If (Not (Me.tableTema) Is Nothing) Then
            Me.tableTema.InitVars
        End If
        Me.tableOUsuario = CType(Me.Tables("OUsuario"),OUsuarioDataTable)
        If (Not (Me.tableOUsuario) Is Nothing) Then
            Me.tableOUsuario.InitVars
        End If
        Me.tableOEmpleado = CType(Me.Tables("OEmpleado"),OEmpleadoDataTable)
        If (Not (Me.tableOEmpleado) Is Nothing) Then
            Me.tableOEmpleado.InitVars
        End If
        Me.tableOFicha_de_Prestamo = CType(Me.Tables("OFicha_de_Prestamo"),OFicha_de_PrestamoDataTable)
        If (Not (Me.tableOFicha_de_Prestamo) Is Nothing) Then
            Me.tableOFicha_de_Prestamo.InitVars
        End If
        Me.tableDevolucion = CType(Me.Tables("Devolucion"),DevolucionDataTable)
        If (Not (Me.tableDevolucion) Is Nothing) Then
            Me.tableDevolucion.InitVars
        End If
    End Sub
    
    Private Sub InitClass()
        Me.DataSetName = "dsBiblioteca1"
        Me.Prefix = ""
        Me.Namespace = "http://tempuri.org/dsBiblioteca1.xsd"
        Me.Locale = New System.Globalization.CultureInfo("en-US")
        Me.CaseSensitive = false
        Me.EnforceConstraints = true
        Me.tableCarne = New CarneDataTable
        Me.Tables.Add(Me.tableCarne)
        Me.tableLibro = New LibroDataTable
        Me.Tables.Add(Me.tableLibro)
        Me.tableTipo_Usuario = New Tipo_UsuarioDataTable
        Me.Tables.Add(Me.tableTipo_Usuario)
        Me.tableTema = New TemaDataTable
        Me.Tables.Add(Me.tableTema)
        Me.tableOUsuario = New OUsuarioDataTable
        Me.Tables.Add(Me.tableOUsuario)
        Me.tableOEmpleado = New OEmpleadoDataTable
        Me.Tables.Add(Me.tableOEmpleado)
        Me.tableOFicha_de_Prestamo = New OFicha_de_PrestamoDataTable
        Me.Tables.Add(Me.tableOFicha_de_Prestamo)
        Me.tableDevolucion = New DevolucionDataTable
        Me.Tables.Add(Me.tableDevolucion)
    End Sub
    
    Private Function ShouldSerializeCarne() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializeLibro() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializeTipo_Usuario() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializeTema() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializeOUsuario() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializeOEmpleado() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializeOFicha_de_Prestamo() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializeDevolucion() As Boolean
        Return false
    End Function
    
    Private Sub SchemaChanged(ByVal sender As Object, ByVal e As System.ComponentModel.CollectionChangeEventArgs)
        If (e.Action = System.ComponentModel.CollectionChangeAction.Remove) Then
            Me.InitVars
        End If
    End Sub
    
    Public Delegate Sub CarneRowChangeEventHandler(ByVal sender As Object, ByVal e As CarneRowChangeEvent)
    
    Public Delegate Sub LibroRowChangeEventHandler(ByVal sender As Object, ByVal e As LibroRowChangeEvent)
    
    Public Delegate Sub Tipo_UsuarioRowChangeEventHandler(ByVal sender As Object, ByVal e As Tipo_UsuarioRowChangeEvent)
    
    Public Delegate Sub TemaRowChangeEventHandler(ByVal sender As Object, ByVal e As TemaRowChangeEvent)
    
    Public Delegate Sub OUsuarioRowChangeEventHandler(ByVal sender As Object, ByVal e As OUsuarioRowChangeEvent)
    
    Public Delegate Sub OEmpleadoRowChangeEventHandler(ByVal sender As Object, ByVal e As OEmpleadoRowChangeEvent)
    
    Public Delegate Sub OFicha_de_PrestamoRowChangeEventHandler(ByVal sender As Object, ByVal e As OFicha_de_PrestamoRowChangeEvent)
    
    Public Delegate Sub DevolucionRowChangeEventHandler(ByVal sender As Object, ByVal e As DevolucionRowChangeEvent)
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class CarneDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnCod_carne As DataColumn
        
        Private columnFecha_Exp As DataColumn
        
        Private columnFecha_Vcto As DataColumn
        
        Private columnCod_Usuario As DataColumn
        
        Friend Sub New()
            MyBase.New("Carne")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property Cod_carneColumn As DataColumn
            Get
                Return Me.columnCod_carne
            End Get
        End Property
        
        Friend ReadOnly Property Fecha_ExpColumn As DataColumn
            Get
                Return Me.columnFecha_Exp
            End Get
        End Property
        
        Friend ReadOnly Property Fecha_VctoColumn As DataColumn
            Get
                Return Me.columnFecha_Vcto
            End Get
        End Property
        
        Friend ReadOnly Property Cod_UsuarioColumn As DataColumn
            Get
                Return Me.columnCod_Usuario
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As CarneRow
            Get
                Return CType(Me.Rows(index),CarneRow)
            End Get
        End Property
        
        Public Event CarneRowChanged As CarneRowChangeEventHandler
        
        Public Event CarneRowChanging As CarneRowChangeEventHandler
        
        Public Event CarneRowDeleted As CarneRowChangeEventHandler
        
        Public Event CarneRowDeleting As CarneRowChangeEventHandler
        
        Public Overloads Sub AddCarneRow(ByVal row As CarneRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddCarneRow(ByVal Cod_carne As Integer, ByVal Fecha_Exp As Date, ByVal Fecha_Vcto As Date, ByVal Cod_Usuario As Integer) As CarneRow
            Dim rowCarneRow As CarneRow = CType(Me.NewRow,CarneRow)
            rowCarneRow.ItemArray = New Object() {Cod_carne, Fecha_Exp, Fecha_Vcto, Cod_Usuario}
            Me.Rows.Add(rowCarneRow)
            Return rowCarneRow
        End Function
        
        Public Function FindByCod_carne(ByVal Cod_carne As Integer) As CarneRow
            Return CType(Me.Rows.Find(New Object() {Cod_carne}),CarneRow)
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As CarneDataTable = CType(MyBase.Clone,CarneDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New CarneDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnCod_carne = Me.Columns("Cod_carne")
            Me.columnFecha_Exp = Me.Columns("Fecha_Exp")
            Me.columnFecha_Vcto = Me.Columns("Fecha_Vcto")
            Me.columnCod_Usuario = Me.Columns("Cod_Usuario")
        End Sub
        
        Private Sub InitClass()
            Me.columnCod_carne = New DataColumn("Cod_carne", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnCod_carne)
            Me.columnFecha_Exp = New DataColumn("Fecha_Exp", GetType(System.DateTime), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnFecha_Exp)
            Me.columnFecha_Vcto = New DataColumn("Fecha_Vcto", GetType(System.DateTime), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnFecha_Vcto)
            Me.columnCod_Usuario = New DataColumn("Cod_Usuario", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnCod_Usuario)
            Me.Constraints.Add(New UniqueConstraint("dsBiblioteca1Key1", New DataColumn() {Me.columnCod_carne}, true))
            Me.columnCod_carne.AllowDBNull = false
            Me.columnCod_carne.Unique = true
            Me.columnFecha_Exp.AllowDBNull = false
            Me.columnFecha_Vcto.AllowDBNull = false
            Me.columnCod_Usuario.AllowDBNull = false
        End Sub
        
        Public Function NewCarneRow() As CarneRow
            Return CType(Me.NewRow,CarneRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New CarneRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(CarneRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.CarneRowChangedEvent) Is Nothing) Then
                RaiseEvent CarneRowChanged(Me, New CarneRowChangeEvent(CType(e.Row,CarneRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.CarneRowChangingEvent) Is Nothing) Then
                RaiseEvent CarneRowChanging(Me, New CarneRowChangeEvent(CType(e.Row,CarneRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.CarneRowDeletedEvent) Is Nothing) Then
                RaiseEvent CarneRowDeleted(Me, New CarneRowChangeEvent(CType(e.Row,CarneRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.CarneRowDeletingEvent) Is Nothing) Then
                RaiseEvent CarneRowDeleting(Me, New CarneRowChangeEvent(CType(e.Row,CarneRow), e.Action))
            End If
        End Sub
        
        Public Sub RemoveCarneRow(ByVal row As CarneRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class CarneRow
        Inherits DataRow
        
        Private tableCarne As CarneDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableCarne = CType(Me.Table,CarneDataTable)
        End Sub
        
        Public Property Cod_carne As Integer
            Get
                Return CType(Me(Me.tableCarne.Cod_carneColumn),Integer)
            End Get
            Set
                Me(Me.tableCarne.Cod_carneColumn) = value
            End Set
        End Property
        
        Public Property Fecha_Exp As Date
            Get
                Return CType(Me(Me.tableCarne.Fecha_ExpColumn),Date)
            End Get
            Set
                Me(Me.tableCarne.Fecha_ExpColumn) = value
            End Set
        End Property
        
        Public Property Fecha_Vcto As Date
            Get
                Return CType(Me(Me.tableCarne.Fecha_VctoColumn),Date)
            End Get
            Set
                Me(Me.tableCarne.Fecha_VctoColumn) = value
            End Set
        End Property
        
        Public Property Cod_Usuario As Integer
            Get
                Return CType(Me(Me.tableCarne.Cod_UsuarioColumn),Integer)
            End Get
            Set
                Me(Me.tableCarne.Cod_UsuarioColumn) = value
            End Set
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class CarneRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As CarneRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As CarneRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As CarneRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class LibroDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnCod_Lib As DataColumn
        
        Private columnTit_Lib As DataColumn
        
        Private columnAut_Lib As DataColumn
        
        Private columnNoPag_Lib As DataColumn
        
        Private columnEdit_Lib As DataColumn
        
        Private columnNoEdic_Lib As DataColumn
        
        Private columnFechaIngreso As DataColumn
        
        Private columnDocto_Ing As DataColumn
        
        Private columnCod_Tema As DataColumn
        
        Friend Sub New()
            MyBase.New("Libro")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property Cod_LibColumn As DataColumn
            Get
                Return Me.columnCod_Lib
            End Get
        End Property
        
        Friend ReadOnly Property Tit_LibColumn As DataColumn
            Get
                Return Me.columnTit_Lib
            End Get
        End Property
        
        Friend ReadOnly Property Aut_LibColumn As DataColumn
            Get
                Return Me.columnAut_Lib
            End Get
        End Property
        
        Friend ReadOnly Property NoPag_LibColumn As DataColumn
            Get
                Return Me.columnNoPag_Lib
            End Get
        End Property
        
        Friend ReadOnly Property Edit_LibColumn As DataColumn
            Get
                Return Me.columnEdit_Lib
            End Get
        End Property
        
        Friend ReadOnly Property NoEdic_LibColumn As DataColumn
            Get
                Return Me.columnNoEdic_Lib
            End Get
        End Property
        
        Friend ReadOnly Property FechaIngresoColumn As DataColumn
            Get
                Return Me.columnFechaIngreso
            End Get
        End Property
        
        Friend ReadOnly Property Docto_IngColumn As DataColumn
            Get
                Return Me.columnDocto_Ing
            End Get
        End Property
        
        Friend ReadOnly Property Cod_TemaColumn As DataColumn
            Get
                Return Me.columnCod_Tema
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As LibroRow
            Get
                Return CType(Me.Rows(index),LibroRow)
            End Get
        End Property
        
        Public Event LibroRowChanged As LibroRowChangeEventHandler
        
        Public Event LibroRowChanging As LibroRowChangeEventHandler
        
        Public Event LibroRowDeleted As LibroRowChangeEventHandler
        
        Public Event LibroRowDeleting As LibroRowChangeEventHandler
        
        Public Overloads Sub AddLibroRow(ByVal row As LibroRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddLibroRow(ByVal Cod_Lib As Integer, ByVal Tit_Lib As String, ByVal Aut_Lib As String, ByVal NoPag_Lib As Integer, ByVal Edit_Lib As String, ByVal NoEdic_Lib As String, ByVal FechaIngreso As Date, ByVal Docto_Ing As String, ByVal Cod_Tema As Integer) As LibroRow
            Dim rowLibroRow As LibroRow = CType(Me.NewRow,LibroRow)
            rowLibroRow.ItemArray = New Object() {Cod_Lib, Tit_Lib, Aut_Lib, NoPag_Lib, Edit_Lib, NoEdic_Lib, FechaIngreso, Docto_Ing, Cod_Tema}
            Me.Rows.Add(rowLibroRow)
            Return rowLibroRow
        End Function
        
        Public Function FindByCod_Lib(ByVal Cod_Lib As Integer) As LibroRow
            Return CType(Me.Rows.Find(New Object() {Cod_Lib}),LibroRow)
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As LibroDataTable = CType(MyBase.Clone,LibroDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New LibroDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnCod_Lib = Me.Columns("Cod_Lib")
            Me.columnTit_Lib = Me.Columns("Tit_Lib")
            Me.columnAut_Lib = Me.Columns("Aut_Lib")
            Me.columnNoPag_Lib = Me.Columns("NoPag_Lib")
            Me.columnEdit_Lib = Me.Columns("Edit_Lib")
            Me.columnNoEdic_Lib = Me.Columns("NoEdic_Lib")
            Me.columnFechaIngreso = Me.Columns("FechaIngreso")
            Me.columnDocto_Ing = Me.Columns("Docto_Ing")
            Me.columnCod_Tema = Me.Columns("Cod_Tema")
        End Sub
        
        Private Sub InitClass()
            Me.columnCod_Lib = New DataColumn("Cod_Lib", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnCod_Lib)
            Me.columnTit_Lib = New DataColumn("Tit_Lib", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnTit_Lib)
            Me.columnAut_Lib = New DataColumn("Aut_Lib", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnAut_Lib)
            Me.columnNoPag_Lib = New DataColumn("NoPag_Lib", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnNoPag_Lib)
            Me.columnEdit_Lib = New DataColumn("Edit_Lib", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnEdit_Lib)
            Me.columnNoEdic_Lib = New DataColumn("NoEdic_Lib", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnNoEdic_Lib)
            Me.columnFechaIngreso = New DataColumn("FechaIngreso", GetType(System.DateTime), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnFechaIngreso)
            Me.columnDocto_Ing = New DataColumn("Docto_Ing", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnDocto_Ing)
            Me.columnCod_Tema = New DataColumn("Cod_Tema", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnCod_Tema)
            Me.Constraints.Add(New UniqueConstraint("dsBiblioteca1Key2", New DataColumn() {Me.columnCod_Lib}, true))
            Me.columnCod_Lib.AllowDBNull = false
            Me.columnCod_Lib.Unique = true
            Me.columnTit_Lib.AllowDBNull = false
            Me.columnAut_Lib.AllowDBNull = false
            Me.columnNoPag_Lib.AllowDBNull = false
            Me.columnEdit_Lib.AllowDBNull = false
            Me.columnNoEdic_Lib.AllowDBNull = false
            Me.columnFechaIngreso.AllowDBNull = false
        End Sub
        
        Public Function NewLibroRow() As LibroRow
            Return CType(Me.NewRow,LibroRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New LibroRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(LibroRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.LibroRowChangedEvent) Is Nothing) Then
                RaiseEvent LibroRowChanged(Me, New LibroRowChangeEvent(CType(e.Row,LibroRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.LibroRowChangingEvent) Is Nothing) Then
                RaiseEvent LibroRowChanging(Me, New LibroRowChangeEvent(CType(e.Row,LibroRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.LibroRowDeletedEvent) Is Nothing) Then
                RaiseEvent LibroRowDeleted(Me, New LibroRowChangeEvent(CType(e.Row,LibroRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.LibroRowDeletingEvent) Is Nothing) Then
                RaiseEvent LibroRowDeleting(Me, New LibroRowChangeEvent(CType(e.Row,LibroRow), e.Action))
            End If
        End Sub
        
        Public Sub RemoveLibroRow(ByVal row As LibroRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class LibroRow
        Inherits DataRow
        
        Private tableLibro As LibroDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableLibro = CType(Me.Table,LibroDataTable)
        End Sub
        
        Public Property Cod_Lib As Integer
            Get
                Return CType(Me(Me.tableLibro.Cod_LibColumn),Integer)
            End Get
            Set
                Me(Me.tableLibro.Cod_LibColumn) = value
            End Set
        End Property
        
        Public Property Tit_Lib As String
            Get
                Return CType(Me(Me.tableLibro.Tit_LibColumn),String)
            End Get
            Set
                Me(Me.tableLibro.Tit_LibColumn) = value
            End Set
        End Property
        
        Public Property Aut_Lib As String
            Get
                Return CType(Me(Me.tableLibro.Aut_LibColumn),String)
            End Get
            Set
                Me(Me.tableLibro.Aut_LibColumn) = value
            End Set
        End Property
        
        Public Property NoPag_Lib As Integer
            Get
                Return CType(Me(Me.tableLibro.NoPag_LibColumn),Integer)
            End Get
            Set
                Me(Me.tableLibro.NoPag_LibColumn) = value
            End Set
        End Property
        
        Public Property Edit_Lib As String
            Get
                Return CType(Me(Me.tableLibro.Edit_LibColumn),String)
            End Get
            Set
                Me(Me.tableLibro.Edit_LibColumn) = value
            End Set
        End Property
        
        Public Property NoEdic_Lib As String
            Get
                Return CType(Me(Me.tableLibro.NoEdic_LibColumn),String)
            End Get
            Set
                Me(Me.tableLibro.NoEdic_LibColumn) = value
            End Set
        End Property
        
        Public Property FechaIngreso As Date
            Get
                Return CType(Me(Me.tableLibro.FechaIngresoColumn),Date)
            End Get
            Set
                Me(Me.tableLibro.FechaIngresoColumn) = value
            End Set
        End Property
        
        Public Property Docto_Ing As String
            Get
                Try 
                    Return CType(Me(Me.tableLibro.Docto_IngColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("No se puede obtener el valor porque es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableLibro.Docto_IngColumn) = value
            End Set
        End Property
        
        Public Property Cod_Tema As Integer
            Get
                Try 
                    Return CType(Me(Me.tableLibro.Cod_TemaColumn),Integer)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("No se puede obtener el valor porque es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableLibro.Cod_TemaColumn) = value
            End Set
        End Property
        
        Public Function IsDocto_IngNull() As Boolean
            Return Me.IsNull(Me.tableLibro.Docto_IngColumn)
        End Function
        
        Public Sub SetDocto_IngNull()
            Me(Me.tableLibro.Docto_IngColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsCod_TemaNull() As Boolean
            Return Me.IsNull(Me.tableLibro.Cod_TemaColumn)
        End Function
        
        Public Sub SetCod_TemaNull()
            Me(Me.tableLibro.Cod_TemaColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class LibroRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As LibroRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As LibroRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As LibroRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class Tipo_UsuarioDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnId_Usu As DataColumn
        
        Private columnDescrip_Usu As DataColumn
        
        Friend Sub New()
            MyBase.New("Tipo_Usuario")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property Id_UsuColumn As DataColumn
            Get
                Return Me.columnId_Usu
            End Get
        End Property
        
        Friend ReadOnly Property Descrip_UsuColumn As DataColumn
            Get
                Return Me.columnDescrip_Usu
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As Tipo_UsuarioRow
            Get
                Return CType(Me.Rows(index),Tipo_UsuarioRow)
            End Get
        End Property
        
        Public Event Tipo_UsuarioRowChanged As Tipo_UsuarioRowChangeEventHandler
        
        Public Event Tipo_UsuarioRowChanging As Tipo_UsuarioRowChangeEventHandler
        
        Public Event Tipo_UsuarioRowDeleted As Tipo_UsuarioRowChangeEventHandler
        
        Public Event Tipo_UsuarioRowDeleting As Tipo_UsuarioRowChangeEventHandler
        
        Public Overloads Sub AddTipo_UsuarioRow(ByVal row As Tipo_UsuarioRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddTipo_UsuarioRow(ByVal Id_Usu As Integer, ByVal Descrip_Usu As String) As Tipo_UsuarioRow
            Dim rowTipo_UsuarioRow As Tipo_UsuarioRow = CType(Me.NewRow,Tipo_UsuarioRow)
            rowTipo_UsuarioRow.ItemArray = New Object() {Id_Usu, Descrip_Usu}
            Me.Rows.Add(rowTipo_UsuarioRow)
            Return rowTipo_UsuarioRow
        End Function
        
        Public Function FindById_Usu(ByVal Id_Usu As Integer) As Tipo_UsuarioRow
            Return CType(Me.Rows.Find(New Object() {Id_Usu}),Tipo_UsuarioRow)
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As Tipo_UsuarioDataTable = CType(MyBase.Clone,Tipo_UsuarioDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New Tipo_UsuarioDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnId_Usu = Me.Columns("Id_Usu")
            Me.columnDescrip_Usu = Me.Columns("Descrip_Usu")
        End Sub
        
        Private Sub InitClass()
            Me.columnId_Usu = New DataColumn("Id_Usu", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnId_Usu)
            Me.columnDescrip_Usu = New DataColumn("Descrip_Usu", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnDescrip_Usu)
            Me.Constraints.Add(New UniqueConstraint("dsBiblioteca1Key3", New DataColumn() {Me.columnId_Usu}, true))
            Me.columnId_Usu.AllowDBNull = false
            Me.columnId_Usu.Unique = true
            Me.columnDescrip_Usu.AllowDBNull = false
        End Sub
        
        Public Function NewTipo_UsuarioRow() As Tipo_UsuarioRow
            Return CType(Me.NewRow,Tipo_UsuarioRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New Tipo_UsuarioRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(Tipo_UsuarioRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.Tipo_UsuarioRowChangedEvent) Is Nothing) Then
                RaiseEvent Tipo_UsuarioRowChanged(Me, New Tipo_UsuarioRowChangeEvent(CType(e.Row,Tipo_UsuarioRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.Tipo_UsuarioRowChangingEvent) Is Nothing) Then
                RaiseEvent Tipo_UsuarioRowChanging(Me, New Tipo_UsuarioRowChangeEvent(CType(e.Row,Tipo_UsuarioRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.Tipo_UsuarioRowDeletedEvent) Is Nothing) Then
                RaiseEvent Tipo_UsuarioRowDeleted(Me, New Tipo_UsuarioRowChangeEvent(CType(e.Row,Tipo_UsuarioRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.Tipo_UsuarioRowDeletingEvent) Is Nothing) Then
                RaiseEvent Tipo_UsuarioRowDeleting(Me, New Tipo_UsuarioRowChangeEvent(CType(e.Row,Tipo_UsuarioRow), e.Action))
            End If
        End Sub
        
        Public Sub RemoveTipo_UsuarioRow(ByVal row As Tipo_UsuarioRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class Tipo_UsuarioRow
        Inherits DataRow
        
        Private tableTipo_Usuario As Tipo_UsuarioDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableTipo_Usuario = CType(Me.Table,Tipo_UsuarioDataTable)
        End Sub
        
        Public Property Id_Usu As Integer
            Get
                Return CType(Me(Me.tableTipo_Usuario.Id_UsuColumn),Integer)
            End Get
            Set
                Me(Me.tableTipo_Usuario.Id_UsuColumn) = value
            End Set
        End Property
        
        Public Property Descrip_Usu As String
            Get
                Return CType(Me(Me.tableTipo_Usuario.Descrip_UsuColumn),String)
            End Get
            Set
                Me(Me.tableTipo_Usuario.Descrip_UsuColumn) = value
            End Set
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class Tipo_UsuarioRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As Tipo_UsuarioRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As Tipo_UsuarioRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As Tipo_UsuarioRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class TemaDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnCod_Tema As DataColumn
        
        Private columnDescripcion As DataColumn
        
        Friend Sub New()
            MyBase.New("Tema")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property Cod_TemaColumn As DataColumn
            Get
                Return Me.columnCod_Tema
            End Get
        End Property
        
        Friend ReadOnly Property DescripcionColumn As DataColumn
            Get
                Return Me.columnDescripcion
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As TemaRow
            Get
                Return CType(Me.Rows(index),TemaRow)
            End Get
        End Property
        
        Public Event TemaRowChanged As TemaRowChangeEventHandler
        
        Public Event TemaRowChanging As TemaRowChangeEventHandler
        
        Public Event TemaRowDeleted As TemaRowChangeEventHandler
        
        Public Event TemaRowDeleting As TemaRowChangeEventHandler
        
        Public Overloads Sub AddTemaRow(ByVal row As TemaRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddTemaRow(ByVal Cod_Tema As Integer, ByVal Descripcion As String) As TemaRow
            Dim rowTemaRow As TemaRow = CType(Me.NewRow,TemaRow)
            rowTemaRow.ItemArray = New Object() {Cod_Tema, Descripcion}
            Me.Rows.Add(rowTemaRow)
            Return rowTemaRow
        End Function
        
        Public Function FindByCod_Tema(ByVal Cod_Tema As Integer) As TemaRow
            Return CType(Me.Rows.Find(New Object() {Cod_Tema}),TemaRow)
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As TemaDataTable = CType(MyBase.Clone,TemaDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New TemaDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnCod_Tema = Me.Columns("Cod_Tema")
            Me.columnDescripcion = Me.Columns("Descripcion")
        End Sub
        
        Private Sub InitClass()
            Me.columnCod_Tema = New DataColumn("Cod_Tema", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnCod_Tema)
            Me.columnDescripcion = New DataColumn("Descripcion", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnDescripcion)
            Me.Constraints.Add(New UniqueConstraint("dsBiblioteca1Key4", New DataColumn() {Me.columnCod_Tema}, true))
            Me.columnCod_Tema.AllowDBNull = false
            Me.columnCod_Tema.Unique = true
            Me.columnDescripcion.AllowDBNull = false
        End Sub
        
        Public Function NewTemaRow() As TemaRow
            Return CType(Me.NewRow,TemaRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New TemaRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(TemaRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.TemaRowChangedEvent) Is Nothing) Then
                RaiseEvent TemaRowChanged(Me, New TemaRowChangeEvent(CType(e.Row,TemaRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.TemaRowChangingEvent) Is Nothing) Then
                RaiseEvent TemaRowChanging(Me, New TemaRowChangeEvent(CType(e.Row,TemaRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.TemaRowDeletedEvent) Is Nothing) Then
                RaiseEvent TemaRowDeleted(Me, New TemaRowChangeEvent(CType(e.Row,TemaRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.TemaRowDeletingEvent) Is Nothing) Then
                RaiseEvent TemaRowDeleting(Me, New TemaRowChangeEvent(CType(e.Row,TemaRow), e.Action))
            End If
        End Sub
        
        Public Sub RemoveTemaRow(ByVal row As TemaRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class TemaRow
        Inherits DataRow
        
        Private tableTema As TemaDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableTema = CType(Me.Table,TemaDataTable)
        End Sub
        
        Public Property Cod_Tema As Integer
            Get
                Return CType(Me(Me.tableTema.Cod_TemaColumn),Integer)
            End Get
            Set
                Me(Me.tableTema.Cod_TemaColumn) = value
            End Set
        End Property
        
        Public Property Descripcion As String
            Get
                Return CType(Me(Me.tableTema.DescripcionColumn),String)
            End Get
            Set
                Me(Me.tableTema.DescripcionColumn) = value
            End Set
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class TemaRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As TemaRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As TemaRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As TemaRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class OUsuarioDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnCod_Usuario As DataColumn
        
        Private columnNombre_Usu As DataColumn
        
        Private columnApel_Usu As DataColumn
        
        Private columnDir_Usu As DataColumn
        
        Private columnId_Usu As DataColumn
        
        Friend Sub New()
            MyBase.New("OUsuario")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property Cod_UsuarioColumn As DataColumn
            Get
                Return Me.columnCod_Usuario
            End Get
        End Property
        
        Friend ReadOnly Property Nombre_UsuColumn As DataColumn
            Get
                Return Me.columnNombre_Usu
            End Get
        End Property
        
        Friend ReadOnly Property Apel_UsuColumn As DataColumn
            Get
                Return Me.columnApel_Usu
            End Get
        End Property
        
        Friend ReadOnly Property Dir_UsuColumn As DataColumn
            Get
                Return Me.columnDir_Usu
            End Get
        End Property
        
        Friend ReadOnly Property Id_UsuColumn As DataColumn
            Get
                Return Me.columnId_Usu
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As OUsuarioRow
            Get
                Return CType(Me.Rows(index),OUsuarioRow)
            End Get
        End Property
        
        Public Event OUsuarioRowChanged As OUsuarioRowChangeEventHandler
        
        Public Event OUsuarioRowChanging As OUsuarioRowChangeEventHandler
        
        Public Event OUsuarioRowDeleted As OUsuarioRowChangeEventHandler
        
        Public Event OUsuarioRowDeleting As OUsuarioRowChangeEventHandler
        
        Public Overloads Sub AddOUsuarioRow(ByVal row As OUsuarioRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddOUsuarioRow(ByVal Cod_Usuario As Integer, ByVal Nombre_Usu As String, ByVal Apel_Usu As String, ByVal Dir_Usu As String, ByVal Id_Usu As Integer) As OUsuarioRow
            Dim rowOUsuarioRow As OUsuarioRow = CType(Me.NewRow,OUsuarioRow)
            rowOUsuarioRow.ItemArray = New Object() {Cod_Usuario, Nombre_Usu, Apel_Usu, Dir_Usu, Id_Usu}
            Me.Rows.Add(rowOUsuarioRow)
            Return rowOUsuarioRow
        End Function
        
        Public Function FindByCod_Usuario(ByVal Cod_Usuario As Integer) As OUsuarioRow
            Return CType(Me.Rows.Find(New Object() {Cod_Usuario}),OUsuarioRow)
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As OUsuarioDataTable = CType(MyBase.Clone,OUsuarioDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New OUsuarioDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnCod_Usuario = Me.Columns("Cod_Usuario")
            Me.columnNombre_Usu = Me.Columns("Nombre_Usu")
            Me.columnApel_Usu = Me.Columns("Apel_Usu")
            Me.columnDir_Usu = Me.Columns("Dir_Usu")
            Me.columnId_Usu = Me.Columns("Id_Usu")
        End Sub
        
        Private Sub InitClass()
            Me.columnCod_Usuario = New DataColumn("Cod_Usuario", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnCod_Usuario)
            Me.columnNombre_Usu = New DataColumn("Nombre_Usu", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnNombre_Usu)
            Me.columnApel_Usu = New DataColumn("Apel_Usu", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnApel_Usu)
            Me.columnDir_Usu = New DataColumn("Dir_Usu", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnDir_Usu)
            Me.columnId_Usu = New DataColumn("Id_Usu", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnId_Usu)
            Me.Constraints.Add(New UniqueConstraint("dsBiblioteca1Key5", New DataColumn() {Me.columnCod_Usuario}, true))
            Me.columnCod_Usuario.AllowDBNull = false
            Me.columnCod_Usuario.Unique = true
            Me.columnNombre_Usu.AllowDBNull = false
            Me.columnApel_Usu.AllowDBNull = false
            Me.columnDir_Usu.AllowDBNull = false
            Me.columnId_Usu.AllowDBNull = false
        End Sub
        
        Public Function NewOUsuarioRow() As OUsuarioRow
            Return CType(Me.NewRow,OUsuarioRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New OUsuarioRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(OUsuarioRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.OUsuarioRowChangedEvent) Is Nothing) Then
                RaiseEvent OUsuarioRowChanged(Me, New OUsuarioRowChangeEvent(CType(e.Row,OUsuarioRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.OUsuarioRowChangingEvent) Is Nothing) Then
                RaiseEvent OUsuarioRowChanging(Me, New OUsuarioRowChangeEvent(CType(e.Row,OUsuarioRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.OUsuarioRowDeletedEvent) Is Nothing) Then
                RaiseEvent OUsuarioRowDeleted(Me, New OUsuarioRowChangeEvent(CType(e.Row,OUsuarioRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.OUsuarioRowDeletingEvent) Is Nothing) Then
                RaiseEvent OUsuarioRowDeleting(Me, New OUsuarioRowChangeEvent(CType(e.Row,OUsuarioRow), e.Action))
            End If
        End Sub
        
        Public Sub RemoveOUsuarioRow(ByVal row As OUsuarioRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class OUsuarioRow
        Inherits DataRow
        
        Private tableOUsuario As OUsuarioDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableOUsuario = CType(Me.Table,OUsuarioDataTable)
        End Sub
        
        Public Property Cod_Usuario As Integer
            Get
                Return CType(Me(Me.tableOUsuario.Cod_UsuarioColumn),Integer)
            End Get
            Set
                Me(Me.tableOUsuario.Cod_UsuarioColumn) = value
            End Set
        End Property
        
        Public Property Nombre_Usu As String
            Get
                Return CType(Me(Me.tableOUsuario.Nombre_UsuColumn),String)
            End Get
            Set
                Me(Me.tableOUsuario.Nombre_UsuColumn) = value
            End Set
        End Property
        
        Public Property Apel_Usu As String
            Get
                Return CType(Me(Me.tableOUsuario.Apel_UsuColumn),String)
            End Get
            Set
                Me(Me.tableOUsuario.Apel_UsuColumn) = value
            End Set
        End Property
        
        Public Property Dir_Usu As String
            Get
                Return CType(Me(Me.tableOUsuario.Dir_UsuColumn),String)
            End Get
            Set
                Me(Me.tableOUsuario.Dir_UsuColumn) = value
            End Set
        End Property
        
        Public Property Id_Usu As Integer
            Get
                Return CType(Me(Me.tableOUsuario.Id_UsuColumn),Integer)
            End Get
            Set
                Me(Me.tableOUsuario.Id_UsuColumn) = value
            End Set
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class OUsuarioRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As OUsuarioRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As OUsuarioRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As OUsuarioRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class OEmpleadoDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnCod_Emp As DataColumn
        
        Private columnNom_Emp As DataColumn
        
        Private columnApe_Emp As DataColumn
        
        Private columnDir_Emp As DataColumn
        
        Private columnFecha_Ingreso As DataColumn
        
        Private columnTelefono As DataColumn
        
        Friend Sub New()
            MyBase.New("OEmpleado")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property Cod_EmpColumn As DataColumn
            Get
                Return Me.columnCod_Emp
            End Get
        End Property
        
        Friend ReadOnly Property Nom_EmpColumn As DataColumn
            Get
                Return Me.columnNom_Emp
            End Get
        End Property
        
        Friend ReadOnly Property Ape_EmpColumn As DataColumn
            Get
                Return Me.columnApe_Emp
            End Get
        End Property
        
        Friend ReadOnly Property Dir_EmpColumn As DataColumn
            Get
                Return Me.columnDir_Emp
            End Get
        End Property
        
        Friend ReadOnly Property Fecha_IngresoColumn As DataColumn
            Get
                Return Me.columnFecha_Ingreso
            End Get
        End Property
        
        Friend ReadOnly Property TelefonoColumn As DataColumn
            Get
                Return Me.columnTelefono
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As OEmpleadoRow
            Get
                Return CType(Me.Rows(index),OEmpleadoRow)
            End Get
        End Property
        
        Public Event OEmpleadoRowChanged As OEmpleadoRowChangeEventHandler
        
        Public Event OEmpleadoRowChanging As OEmpleadoRowChangeEventHandler
        
        Public Event OEmpleadoRowDeleted As OEmpleadoRowChangeEventHandler
        
        Public Event OEmpleadoRowDeleting As OEmpleadoRowChangeEventHandler
        
        Public Overloads Sub AddOEmpleadoRow(ByVal row As OEmpleadoRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddOEmpleadoRow(ByVal Cod_Emp As Integer, ByVal Nom_Emp As String, ByVal Ape_Emp As String, ByVal Dir_Emp As String, ByVal Fecha_Ingreso As Date, ByVal Telefono As String) As OEmpleadoRow
            Dim rowOEmpleadoRow As OEmpleadoRow = CType(Me.NewRow,OEmpleadoRow)
            rowOEmpleadoRow.ItemArray = New Object() {Cod_Emp, Nom_Emp, Ape_Emp, Dir_Emp, Fecha_Ingreso, Telefono}
            Me.Rows.Add(rowOEmpleadoRow)
            Return rowOEmpleadoRow
        End Function
        
        Public Function FindByCod_Emp(ByVal Cod_Emp As Integer) As OEmpleadoRow
            Return CType(Me.Rows.Find(New Object() {Cod_Emp}),OEmpleadoRow)
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As OEmpleadoDataTable = CType(MyBase.Clone,OEmpleadoDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New OEmpleadoDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnCod_Emp = Me.Columns("Cod_Emp")
            Me.columnNom_Emp = Me.Columns("Nom_Emp")
            Me.columnApe_Emp = Me.Columns("Ape_Emp")
            Me.columnDir_Emp = Me.Columns("Dir_Emp")
            Me.columnFecha_Ingreso = Me.Columns("Fecha_Ingreso")
            Me.columnTelefono = Me.Columns("Telefono")
        End Sub
        
        Private Sub InitClass()
            Me.columnCod_Emp = New DataColumn("Cod_Emp", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnCod_Emp)
            Me.columnNom_Emp = New DataColumn("Nom_Emp", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnNom_Emp)
            Me.columnApe_Emp = New DataColumn("Ape_Emp", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnApe_Emp)
            Me.columnDir_Emp = New DataColumn("Dir_Emp", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnDir_Emp)
            Me.columnFecha_Ingreso = New DataColumn("Fecha_Ingreso", GetType(System.DateTime), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnFecha_Ingreso)
            Me.columnTelefono = New DataColumn("Telefono", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnTelefono)
            Me.Constraints.Add(New UniqueConstraint("dsBiblioteca1Key6", New DataColumn() {Me.columnCod_Emp}, true))
            Me.columnCod_Emp.AllowDBNull = false
            Me.columnCod_Emp.Unique = true
            Me.columnNom_Emp.AllowDBNull = false
            Me.columnApe_Emp.AllowDBNull = false
            Me.columnDir_Emp.AllowDBNull = false
            Me.columnFecha_Ingreso.AllowDBNull = false
        End Sub
        
        Public Function NewOEmpleadoRow() As OEmpleadoRow
            Return CType(Me.NewRow,OEmpleadoRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New OEmpleadoRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(OEmpleadoRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.OEmpleadoRowChangedEvent) Is Nothing) Then
                RaiseEvent OEmpleadoRowChanged(Me, New OEmpleadoRowChangeEvent(CType(e.Row,OEmpleadoRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.OEmpleadoRowChangingEvent) Is Nothing) Then
                RaiseEvent OEmpleadoRowChanging(Me, New OEmpleadoRowChangeEvent(CType(e.Row,OEmpleadoRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.OEmpleadoRowDeletedEvent) Is Nothing) Then
                RaiseEvent OEmpleadoRowDeleted(Me, New OEmpleadoRowChangeEvent(CType(e.Row,OEmpleadoRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.OEmpleadoRowDeletingEvent) Is Nothing) Then
                RaiseEvent OEmpleadoRowDeleting(Me, New OEmpleadoRowChangeEvent(CType(e.Row,OEmpleadoRow), e.Action))
            End If
        End Sub
        
        Public Sub RemoveOEmpleadoRow(ByVal row As OEmpleadoRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class OEmpleadoRow
        Inherits DataRow
        
        Private tableOEmpleado As OEmpleadoDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableOEmpleado = CType(Me.Table,OEmpleadoDataTable)
        End Sub
        
        Public Property Cod_Emp As Integer
            Get
                Return CType(Me(Me.tableOEmpleado.Cod_EmpColumn),Integer)
            End Get
            Set
                Me(Me.tableOEmpleado.Cod_EmpColumn) = value
            End Set
        End Property
        
        Public Property Nom_Emp As String
            Get
                Return CType(Me(Me.tableOEmpleado.Nom_EmpColumn),String)
            End Get
            Set
                Me(Me.tableOEmpleado.Nom_EmpColumn) = value
            End Set
        End Property
        
        Public Property Ape_Emp As String
            Get
                Return CType(Me(Me.tableOEmpleado.Ape_EmpColumn),String)
            End Get
            Set
                Me(Me.tableOEmpleado.Ape_EmpColumn) = value
            End Set
        End Property
        
        Public Property Dir_Emp As String
            Get
                Return CType(Me(Me.tableOEmpleado.Dir_EmpColumn),String)
            End Get
            Set
                Me(Me.tableOEmpleado.Dir_EmpColumn) = value
            End Set
        End Property
        
        Public Property Fecha_Ingreso As Date
            Get
                Return CType(Me(Me.tableOEmpleado.Fecha_IngresoColumn),Date)
            End Get
            Set
                Me(Me.tableOEmpleado.Fecha_IngresoColumn) = value
            End Set
        End Property
        
        Public Property Telefono As String
            Get
                Try 
                    Return CType(Me(Me.tableOEmpleado.TelefonoColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("No se puede obtener el valor porque es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableOEmpleado.TelefonoColumn) = value
            End Set
        End Property
        
        Public Function IsTelefonoNull() As Boolean
            Return Me.IsNull(Me.tableOEmpleado.TelefonoColumn)
        End Function
        
        Public Sub SetTelefonoNull()
            Me(Me.tableOEmpleado.TelefonoColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class OEmpleadoRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As OEmpleadoRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As OEmpleadoRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As OEmpleadoRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class OFicha_de_PrestamoDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnFecha_Ptmo As DataColumn
        
        Private columnNro_Ficha As DataColumn
        
        Private columnCod_carne As DataColumn
        
        Private columnCod_Lib As DataColumn
        
        Private columnCod_Emp As DataColumn
        
        Friend Sub New()
            MyBase.New("OFicha_de_Prestamo")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property Fecha_PtmoColumn As DataColumn
            Get
                Return Me.columnFecha_Ptmo
            End Get
        End Property
        
        Friend ReadOnly Property Nro_FichaColumn As DataColumn
            Get
                Return Me.columnNro_Ficha
            End Get
        End Property
        
        Friend ReadOnly Property Cod_carneColumn As DataColumn
            Get
                Return Me.columnCod_carne
            End Get
        End Property
        
        Friend ReadOnly Property Cod_LibColumn As DataColumn
            Get
                Return Me.columnCod_Lib
            End Get
        End Property
        
        Friend ReadOnly Property Cod_EmpColumn As DataColumn
            Get
                Return Me.columnCod_Emp
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As OFicha_de_PrestamoRow
            Get
                Return CType(Me.Rows(index),OFicha_de_PrestamoRow)
            End Get
        End Property
        
        Public Event OFicha_de_PrestamoRowChanged As OFicha_de_PrestamoRowChangeEventHandler
        
        Public Event OFicha_de_PrestamoRowChanging As OFicha_de_PrestamoRowChangeEventHandler
        
        Public Event OFicha_de_PrestamoRowDeleted As OFicha_de_PrestamoRowChangeEventHandler
        
        Public Event OFicha_de_PrestamoRowDeleting As OFicha_de_PrestamoRowChangeEventHandler
        
        Public Overloads Sub AddOFicha_de_PrestamoRow(ByVal row As OFicha_de_PrestamoRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddOFicha_de_PrestamoRow(ByVal Fecha_Ptmo As Date, ByVal Nro_Ficha As Integer, ByVal Cod_carne As Integer, ByVal Cod_Lib As Integer, ByVal Cod_Emp As Integer) As OFicha_de_PrestamoRow
            Dim rowOFicha_de_PrestamoRow As OFicha_de_PrestamoRow = CType(Me.NewRow,OFicha_de_PrestamoRow)
            rowOFicha_de_PrestamoRow.ItemArray = New Object() {Fecha_Ptmo, Nro_Ficha, Cod_carne, Cod_Lib, Cod_Emp}
            Me.Rows.Add(rowOFicha_de_PrestamoRow)
            Return rowOFicha_de_PrestamoRow
        End Function
        
        Public Function FindByNro_Ficha(ByVal Nro_Ficha As Integer) As OFicha_de_PrestamoRow
            Return CType(Me.Rows.Find(New Object() {Nro_Ficha}),OFicha_de_PrestamoRow)
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As OFicha_de_PrestamoDataTable = CType(MyBase.Clone,OFicha_de_PrestamoDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New OFicha_de_PrestamoDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnFecha_Ptmo = Me.Columns("Fecha_Ptmo")
            Me.columnNro_Ficha = Me.Columns("Nro_Ficha")
            Me.columnCod_carne = Me.Columns("Cod_carne")
            Me.columnCod_Lib = Me.Columns("Cod_Lib")
            Me.columnCod_Emp = Me.Columns("Cod_Emp")
        End Sub
        
        Private Sub InitClass()
            Me.columnFecha_Ptmo = New DataColumn("Fecha_Ptmo", GetType(System.DateTime), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnFecha_Ptmo)
            Me.columnNro_Ficha = New DataColumn("Nro_Ficha", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnNro_Ficha)
            Me.columnCod_carne = New DataColumn("Cod_carne", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnCod_carne)
            Me.columnCod_Lib = New DataColumn("Cod_Lib", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnCod_Lib)
            Me.columnCod_Emp = New DataColumn("Cod_Emp", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnCod_Emp)
            Me.Constraints.Add(New UniqueConstraint("dsBiblioteca1Key7", New DataColumn() {Me.columnNro_Ficha}, true))
            Me.columnNro_Ficha.AllowDBNull = false
            Me.columnNro_Ficha.Unique = true
            Me.columnCod_carne.AllowDBNull = false
            Me.columnCod_Lib.AllowDBNull = false
            Me.columnCod_Emp.AllowDBNull = false
        End Sub
        
        Public Function NewOFicha_de_PrestamoRow() As OFicha_de_PrestamoRow
            Return CType(Me.NewRow,OFicha_de_PrestamoRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New OFicha_de_PrestamoRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(OFicha_de_PrestamoRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.OFicha_de_PrestamoRowChangedEvent) Is Nothing) Then
                RaiseEvent OFicha_de_PrestamoRowChanged(Me, New OFicha_de_PrestamoRowChangeEvent(CType(e.Row,OFicha_de_PrestamoRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.OFicha_de_PrestamoRowChangingEvent) Is Nothing) Then
                RaiseEvent OFicha_de_PrestamoRowChanging(Me, New OFicha_de_PrestamoRowChangeEvent(CType(e.Row,OFicha_de_PrestamoRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.OFicha_de_PrestamoRowDeletedEvent) Is Nothing) Then
                RaiseEvent OFicha_de_PrestamoRowDeleted(Me, New OFicha_de_PrestamoRowChangeEvent(CType(e.Row,OFicha_de_PrestamoRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.OFicha_de_PrestamoRowDeletingEvent) Is Nothing) Then
                RaiseEvent OFicha_de_PrestamoRowDeleting(Me, New OFicha_de_PrestamoRowChangeEvent(CType(e.Row,OFicha_de_PrestamoRow), e.Action))
            End If
        End Sub
        
        Public Sub RemoveOFicha_de_PrestamoRow(ByVal row As OFicha_de_PrestamoRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class OFicha_de_PrestamoRow
        Inherits DataRow
        
        Private tableOFicha_de_Prestamo As OFicha_de_PrestamoDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableOFicha_de_Prestamo = CType(Me.Table,OFicha_de_PrestamoDataTable)
        End Sub
        
        Public Property Fecha_Ptmo As Date
            Get
                Try 
                    Return CType(Me(Me.tableOFicha_de_Prestamo.Fecha_PtmoColumn),Date)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("No se puede obtener el valor porque es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableOFicha_de_Prestamo.Fecha_PtmoColumn) = value
            End Set
        End Property
        
        Public Property Nro_Ficha As Integer
            Get
                Return CType(Me(Me.tableOFicha_de_Prestamo.Nro_FichaColumn),Integer)
            End Get
            Set
                Me(Me.tableOFicha_de_Prestamo.Nro_FichaColumn) = value
            End Set
        End Property
        
        Public Property Cod_carne As Integer
            Get
                Return CType(Me(Me.tableOFicha_de_Prestamo.Cod_carneColumn),Integer)
            End Get
            Set
                Me(Me.tableOFicha_de_Prestamo.Cod_carneColumn) = value
            End Set
        End Property
        
        Public Property Cod_Lib As Integer
            Get
                Return CType(Me(Me.tableOFicha_de_Prestamo.Cod_LibColumn),Integer)
            End Get
            Set
                Me(Me.tableOFicha_de_Prestamo.Cod_LibColumn) = value
            End Set
        End Property
        
        Public Property Cod_Emp As Integer
            Get
                Return CType(Me(Me.tableOFicha_de_Prestamo.Cod_EmpColumn),Integer)
            End Get
            Set
                Me(Me.tableOFicha_de_Prestamo.Cod_EmpColumn) = value
            End Set
        End Property
        
        Public Function IsFecha_PtmoNull() As Boolean
            Return Me.IsNull(Me.tableOFicha_de_Prestamo.Fecha_PtmoColumn)
        End Function
        
        Public Sub SetFecha_PtmoNull()
            Me(Me.tableOFicha_de_Prestamo.Fecha_PtmoColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class OFicha_de_PrestamoRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As OFicha_de_PrestamoRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As OFicha_de_PrestamoRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As OFicha_de_PrestamoRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class DevolucionDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnId_Dev As DataColumn
        
        Private columnNro_Ficha As DataColumn
        
        Private columnFecha_Dev As DataColumn
        
        Private columnObservacion As DataColumn
        
        Private columnCod_Emp As DataColumn
        
        Friend Sub New()
            MyBase.New("Devolucion")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property Id_DevColumn As DataColumn
            Get
                Return Me.columnId_Dev
            End Get
        End Property
        
        Friend ReadOnly Property Nro_FichaColumn As DataColumn
            Get
                Return Me.columnNro_Ficha
            End Get
        End Property
        
        Friend ReadOnly Property Fecha_DevColumn As DataColumn
            Get
                Return Me.columnFecha_Dev
            End Get
        End Property
        
        Friend ReadOnly Property ObservacionColumn As DataColumn
            Get
                Return Me.columnObservacion
            End Get
        End Property
        
        Friend ReadOnly Property Cod_EmpColumn As DataColumn
            Get
                Return Me.columnCod_Emp
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As DevolucionRow
            Get
                Return CType(Me.Rows(index),DevolucionRow)
            End Get
        End Property
        
        Public Event DevolucionRowChanged As DevolucionRowChangeEventHandler
        
        Public Event DevolucionRowChanging As DevolucionRowChangeEventHandler
        
        Public Event DevolucionRowDeleted As DevolucionRowChangeEventHandler
        
        Public Event DevolucionRowDeleting As DevolucionRowChangeEventHandler
        
        Public Overloads Sub AddDevolucionRow(ByVal row As DevolucionRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddDevolucionRow(ByVal Id_Dev As Integer, ByVal Nro_Ficha As Integer, ByVal Fecha_Dev As Date, ByVal Observacion As String, ByVal Cod_Emp As Integer) As DevolucionRow
            Dim rowDevolucionRow As DevolucionRow = CType(Me.NewRow,DevolucionRow)
            rowDevolucionRow.ItemArray = New Object() {Id_Dev, Nro_Ficha, Fecha_Dev, Observacion, Cod_Emp}
            Me.Rows.Add(rowDevolucionRow)
            Return rowDevolucionRow
        End Function
        
        Public Function FindById_Dev(ByVal Id_Dev As Integer) As DevolucionRow
            Return CType(Me.Rows.Find(New Object() {Id_Dev}),DevolucionRow)
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As DevolucionDataTable = CType(MyBase.Clone,DevolucionDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New DevolucionDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnId_Dev = Me.Columns("Id_Dev")
            Me.columnNro_Ficha = Me.Columns("Nro_Ficha")
            Me.columnFecha_Dev = Me.Columns("Fecha_Dev")
            Me.columnObservacion = Me.Columns("Observacion")
            Me.columnCod_Emp = Me.Columns("Cod_Emp")
        End Sub
        
        Private Sub InitClass()
            Me.columnId_Dev = New DataColumn("Id_Dev", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnId_Dev)
            Me.columnNro_Ficha = New DataColumn("Nro_Ficha", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnNro_Ficha)
            Me.columnFecha_Dev = New DataColumn("Fecha_Dev", GetType(System.DateTime), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnFecha_Dev)
            Me.columnObservacion = New DataColumn("Observacion", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnObservacion)
            Me.columnCod_Emp = New DataColumn("Cod_Emp", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnCod_Emp)
            Me.Constraints.Add(New UniqueConstraint("dsBiblioteca1Key8", New DataColumn() {Me.columnId_Dev}, true))
            Me.columnId_Dev.AllowDBNull = false
            Me.columnId_Dev.Unique = true
            Me.columnNro_Ficha.AllowDBNull = false
            Me.columnCod_Emp.AllowDBNull = false
        End Sub
        
        Public Function NewDevolucionRow() As DevolucionRow
            Return CType(Me.NewRow,DevolucionRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New DevolucionRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(DevolucionRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.DevolucionRowChangedEvent) Is Nothing) Then
                RaiseEvent DevolucionRowChanged(Me, New DevolucionRowChangeEvent(CType(e.Row,DevolucionRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.DevolucionRowChangingEvent) Is Nothing) Then
                RaiseEvent DevolucionRowChanging(Me, New DevolucionRowChangeEvent(CType(e.Row,DevolucionRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.DevolucionRowDeletedEvent) Is Nothing) Then
                RaiseEvent DevolucionRowDeleted(Me, New DevolucionRowChangeEvent(CType(e.Row,DevolucionRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.DevolucionRowDeletingEvent) Is Nothing) Then
                RaiseEvent DevolucionRowDeleting(Me, New DevolucionRowChangeEvent(CType(e.Row,DevolucionRow), e.Action))
            End If
        End Sub
        
        Public Sub RemoveDevolucionRow(ByVal row As DevolucionRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class DevolucionRow
        Inherits DataRow
        
        Private tableDevolucion As DevolucionDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableDevolucion = CType(Me.Table,DevolucionDataTable)
        End Sub
        
        Public Property Id_Dev As Integer
            Get
                Return CType(Me(Me.tableDevolucion.Id_DevColumn),Integer)
            End Get
            Set
                Me(Me.tableDevolucion.Id_DevColumn) = value
            End Set
        End Property
        
        Public Property Nro_Ficha As Integer
            Get
                Return CType(Me(Me.tableDevolucion.Nro_FichaColumn),Integer)
            End Get
            Set
                Me(Me.tableDevolucion.Nro_FichaColumn) = value
            End Set
        End Property
        
        Public Property Fecha_Dev As Date
            Get
                Try 
                    Return CType(Me(Me.tableDevolucion.Fecha_DevColumn),Date)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("No se puede obtener el valor porque es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDevolucion.Fecha_DevColumn) = value
            End Set
        End Property
        
        Public Property Observacion As String
            Get
                Try 
                    Return CType(Me(Me.tableDevolucion.ObservacionColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("No se puede obtener el valor porque es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDevolucion.ObservacionColumn) = value
            End Set
        End Property
        
        Public Property Cod_Emp As Integer
            Get
                Return CType(Me(Me.tableDevolucion.Cod_EmpColumn),Integer)
            End Get
            Set
                Me(Me.tableDevolucion.Cod_EmpColumn) = value
            End Set
        End Property
        
        Public Function IsFecha_DevNull() As Boolean
            Return Me.IsNull(Me.tableDevolucion.Fecha_DevColumn)
        End Function
        
        Public Sub SetFecha_DevNull()
            Me(Me.tableDevolucion.Fecha_DevColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsObservacionNull() As Boolean
            Return Me.IsNull(Me.tableDevolucion.ObservacionColumn)
        End Function
        
        Public Sub SetObservacionNull()
            Me(Me.tableDevolucion.ObservacionColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class DevolucionRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As DevolucionRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As DevolucionRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As DevolucionRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
End Class
