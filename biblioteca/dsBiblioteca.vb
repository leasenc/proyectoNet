'------------------------------------------------------------------------------
' <autogenerated>
'     This code was generated by a tool.
'     Runtime Version: 1.0.3705.0
'
'     Changes to this file may cause incorrect behavior and will be lost if 
'     the code is regenerated.
' </autogenerated>
'------------------------------------------------------------------------------

Option Strict Off
Option Explicit On

Imports System
Imports System.Data
Imports System.Runtime.Serialization
Imports System.Xml


<Serializable(),  _
 System.ComponentModel.DesignerCategoryAttribute("code"),  _
 System.Diagnostics.DebuggerStepThrough(),  _
 System.ComponentModel.ToolboxItem(true)>  _
Public Class dsBiblioteca
    Inherits DataSet
    
    Private tableTema As TemaDataTable
    
    Private tableLibro As LibroDataTable
    
    Private relationLibroTema As DataRelation
    
    Public Sub New()
        MyBase.New
        Me.InitClass
        Dim schemaChangedHandler As System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler Me.Tables.CollectionChanged, schemaChangedHandler
        AddHandler Me.Relations.CollectionChanged, schemaChangedHandler
    End Sub
    
    Protected Sub New(ByVal info As SerializationInfo, ByVal context As StreamingContext)
        MyBase.New
        Dim strSchema As String = CType(info.GetValue("XmlSchema", GetType(System.String)),String)
        If (Not (strSchema) Is Nothing) Then
            Dim ds As DataSet = New DataSet
            ds.ReadXmlSchema(New XmlTextReader(New System.IO.StringReader(strSchema)))
            If (Not (ds.Tables("Tema")) Is Nothing) Then
                Me.Tables.Add(New TemaDataTable(ds.Tables("Tema")))
            End If
            If (Not (ds.Tables("Libro")) Is Nothing) Then
                Me.Tables.Add(New LibroDataTable(ds.Tables("Libro")))
            End If
            Me.DataSetName = ds.DataSetName
            Me.Prefix = ds.Prefix
            Me.Namespace = ds.Namespace
            Me.Locale = ds.Locale
            Me.CaseSensitive = ds.CaseSensitive
            Me.EnforceConstraints = ds.EnforceConstraints
            Me.Merge(ds, false, System.Data.MissingSchemaAction.Add)
            Me.InitVars
        Else
            Me.InitClass
        End If
        Me.GetSerializationData(info, context)
        Dim schemaChangedHandler As System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler Me.Tables.CollectionChanged, schemaChangedHandler
        AddHandler Me.Relations.CollectionChanged, schemaChangedHandler
    End Sub
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property Tema As TemaDataTable
        Get
            Return Me.tableTema
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property Libro As LibroDataTable
        Get
            Return Me.tableLibro
        End Get
    End Property
    
    Public Overrides Function Clone() As DataSet
        Dim cln As dsBiblioteca = CType(MyBase.Clone,dsBiblioteca)
        cln.InitVars
        Return cln
    End Function
    
    Protected Overrides Function ShouldSerializeTables() As Boolean
        Return false
    End Function
    
    Protected Overrides Function ShouldSerializeRelations() As Boolean
        Return false
    End Function
    
    Protected Overrides Sub ReadXmlSerializable(ByVal reader As XmlReader)
        Me.Reset
        Dim ds As DataSet = New DataSet
        ds.ReadXml(reader)
        If (Not (ds.Tables("Tema")) Is Nothing) Then
            Me.Tables.Add(New TemaDataTable(ds.Tables("Tema")))
        End If
        If (Not (ds.Tables("Libro")) Is Nothing) Then
            Me.Tables.Add(New LibroDataTable(ds.Tables("Libro")))
        End If
        Me.DataSetName = ds.DataSetName
        Me.Prefix = ds.Prefix
        Me.Namespace = ds.Namespace
        Me.Locale = ds.Locale
        Me.CaseSensitive = ds.CaseSensitive
        Me.EnforceConstraints = ds.EnforceConstraints
        Me.Merge(ds, false, System.Data.MissingSchemaAction.Add)
        Me.InitVars
    End Sub
    
    Protected Overrides Function GetSchemaSerializable() As System.Xml.Schema.XmlSchema
        Dim stream As System.IO.MemoryStream = New System.IO.MemoryStream
        Me.WriteXmlSchema(New XmlTextWriter(stream, Nothing))
        stream.Position = 0
        Return System.Xml.Schema.XmlSchema.Read(New XmlTextReader(stream), Nothing)
    End Function
    
    Friend Sub InitVars()
        Me.tableTema = CType(Me.Tables("Tema"),TemaDataTable)
        If (Not (Me.tableTema) Is Nothing) Then
            Me.tableTema.InitVars
        End If
        Me.tableLibro = CType(Me.Tables("Libro"),LibroDataTable)
        If (Not (Me.tableLibro) Is Nothing) Then
            Me.tableLibro.InitVars
        End If
        Me.relationLibroTema = Me.Relations("LibroTema")
    End Sub
    
    Private Sub InitClass()
        Me.DataSetName = "dsBiblioteca"
        Me.Prefix = ""
        Me.Namespace = "http://tempuri.org/dsBiblioteca.xsd"
        Me.Locale = New System.Globalization.CultureInfo("en-US")
        Me.CaseSensitive = false
        Me.EnforceConstraints = true
        Me.tableTema = New TemaDataTable
        Me.Tables.Add(Me.tableTema)
        Me.tableLibro = New LibroDataTable
        Me.Tables.Add(Me.tableLibro)
        Dim fkc As ForeignKeyConstraint
        fkc = New ForeignKeyConstraint("LibroTema", New DataColumn() {Me.tableLibro.Cod_TemaColumn}, New DataColumn() {Me.tableTema.Cod_TemaColumn})
        Me.tableTema.Constraints.Add(fkc)
        fkc.AcceptRejectRule = AcceptRejectRule.None
        fkc.DeleteRule = Rule.Cascade
        fkc.UpdateRule = Rule.Cascade
        Me.relationLibroTema = New DataRelation("LibroTema", New DataColumn() {Me.tableLibro.Cod_TemaColumn}, New DataColumn() {Me.tableTema.Cod_TemaColumn}, false)
        Me.Relations.Add(Me.relationLibroTema)
    End Sub
    
    Private Function ShouldSerializeTema() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializeLibro() As Boolean
        Return false
    End Function
    
    Private Sub SchemaChanged(ByVal sender As Object, ByVal e As System.ComponentModel.CollectionChangeEventArgs)
        If (e.Action = System.ComponentModel.CollectionChangeAction.Remove) Then
            Me.InitVars
        End If
    End Sub
    
    Public Delegate Sub TemaRowChangeEventHandler(ByVal sender As Object, ByVal e As TemaRowChangeEvent)
    
    Public Delegate Sub LibroRowChangeEventHandler(ByVal sender As Object, ByVal e As LibroRowChangeEvent)
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class TemaDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnCod_Tema As DataColumn
        
        Private columnDescripcion As DataColumn
        
        Friend Sub New()
            MyBase.New("Tema")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property Cod_TemaColumn As DataColumn
            Get
                Return Me.columnCod_Tema
            End Get
        End Property
        
        Friend ReadOnly Property DescripcionColumn As DataColumn
            Get
                Return Me.columnDescripcion
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As TemaRow
            Get
                Return CType(Me.Rows(index),TemaRow)
            End Get
        End Property
        
        Public Event TemaRowChanged As TemaRowChangeEventHandler
        
        Public Event TemaRowChanging As TemaRowChangeEventHandler
        
        Public Event TemaRowDeleted As TemaRowChangeEventHandler
        
        Public Event TemaRowDeleting As TemaRowChangeEventHandler
        
        Public Overloads Sub AddTemaRow(ByVal row As TemaRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddTemaRow(ByVal parentLibroRowByLibroTema As LibroRow, ByVal Descripcion As String) As TemaRow
            Dim rowTemaRow As TemaRow = CType(Me.NewRow,TemaRow)
            rowTemaRow.ItemArray = New Object() {parentLibroRowByLibroTema(8), Descripcion}
            Me.Rows.Add(rowTemaRow)
            Return rowTemaRow
        End Function
        
        Public Function FindByCod_Tema(ByVal Cod_Tema As Integer) As TemaRow
            Return CType(Me.Rows.Find(New Object() {Cod_Tema}),TemaRow)
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As TemaDataTable = CType(MyBase.Clone,TemaDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New TemaDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnCod_Tema = Me.Columns("Cod_Tema")
            Me.columnDescripcion = Me.Columns("Descripcion")
        End Sub
        
        Private Sub InitClass()
            Me.columnCod_Tema = New DataColumn("Cod_Tema", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnCod_Tema)
            Me.columnDescripcion = New DataColumn("Descripcion", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnDescripcion)
            Me.Constraints.Add(New UniqueConstraint("dsBibliotecaKey1", New DataColumn() {Me.columnCod_Tema}, true))
            Me.columnCod_Tema.AllowDBNull = false
            Me.columnCod_Tema.Unique = true
            Me.columnDescripcion.AllowDBNull = false
        End Sub
        
        Public Function NewTemaRow() As TemaRow
            Return CType(Me.NewRow,TemaRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New TemaRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(TemaRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.TemaRowChangedEvent) Is Nothing) Then
                RaiseEvent TemaRowChanged(Me, New TemaRowChangeEvent(CType(e.Row,TemaRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.TemaRowChangingEvent) Is Nothing) Then
                RaiseEvent TemaRowChanging(Me, New TemaRowChangeEvent(CType(e.Row,TemaRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.TemaRowDeletedEvent) Is Nothing) Then
                RaiseEvent TemaRowDeleted(Me, New TemaRowChangeEvent(CType(e.Row,TemaRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.TemaRowDeletingEvent) Is Nothing) Then
                RaiseEvent TemaRowDeleting(Me, New TemaRowChangeEvent(CType(e.Row,TemaRow), e.Action))
            End If
        End Sub
        
        Public Sub RemoveTemaRow(ByVal row As TemaRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class TemaRow
        Inherits DataRow
        
        Private tableTema As TemaDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableTema = CType(Me.Table,TemaDataTable)
        End Sub
        
        Public Property Cod_Tema As Integer
            Get
                Return CType(Me(Me.tableTema.Cod_TemaColumn),Integer)
            End Get
            Set
                Me(Me.tableTema.Cod_TemaColumn) = value
            End Set
        End Property
        
        Public Property Descripcion As String
            Get
                Return CType(Me(Me.tableTema.DescripcionColumn),String)
            End Get
            Set
                Me(Me.tableTema.DescripcionColumn) = value
            End Set
        End Property
        
        Public Property LibroRow As LibroRow
            Get
                Return CType(Me.GetParentRow(Me.Table.ParentRelations("LibroTema")),LibroRow)
            End Get
            Set
                Me.SetParentRow(value, Me.Table.ParentRelations("LibroTema"))
            End Set
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class TemaRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As TemaRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As TemaRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As TemaRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class LibroDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnCod_Lib As DataColumn
        
        Private columnTit_Lib As DataColumn
        
        Private columnAut_Lib As DataColumn
        
        Private columnNoPag_Lib As DataColumn
        
        Private columnEdit_Lib As DataColumn
        
        Private columnNoEdic_Lib As DataColumn
        
        Private columnFechaIngreso As DataColumn
        
        Private columnDocto_Ing As DataColumn
        
        Private columnCod_Tema As DataColumn
        
        Friend Sub New()
            MyBase.New("Libro")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property Cod_LibColumn As DataColumn
            Get
                Return Me.columnCod_Lib
            End Get
        End Property
        
        Friend ReadOnly Property Tit_LibColumn As DataColumn
            Get
                Return Me.columnTit_Lib
            End Get
        End Property
        
        Friend ReadOnly Property Aut_LibColumn As DataColumn
            Get
                Return Me.columnAut_Lib
            End Get
        End Property
        
        Friend ReadOnly Property NoPag_LibColumn As DataColumn
            Get
                Return Me.columnNoPag_Lib
            End Get
        End Property
        
        Friend ReadOnly Property Edit_LibColumn As DataColumn
            Get
                Return Me.columnEdit_Lib
            End Get
        End Property
        
        Friend ReadOnly Property NoEdic_LibColumn As DataColumn
            Get
                Return Me.columnNoEdic_Lib
            End Get
        End Property
        
        Friend ReadOnly Property FechaIngresoColumn As DataColumn
            Get
                Return Me.columnFechaIngreso
            End Get
        End Property
        
        Friend ReadOnly Property Docto_IngColumn As DataColumn
            Get
                Return Me.columnDocto_Ing
            End Get
        End Property
        
        Friend ReadOnly Property Cod_TemaColumn As DataColumn
            Get
                Return Me.columnCod_Tema
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As LibroRow
            Get
                Return CType(Me.Rows(index),LibroRow)
            End Get
        End Property
        
        Public Event LibroRowChanged As LibroRowChangeEventHandler
        
        Public Event LibroRowChanging As LibroRowChangeEventHandler
        
        Public Event LibroRowDeleted As LibroRowChangeEventHandler
        
        Public Event LibroRowDeleting As LibroRowChangeEventHandler
        
        Public Overloads Sub AddLibroRow(ByVal row As LibroRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddLibroRow(ByVal Cod_Lib As Integer, ByVal Tit_Lib As String, ByVal Aut_Lib As String, ByVal NoPag_Lib As Integer, ByVal Edit_Lib As String, ByVal NoEdic_Lib As String, ByVal FechaIngreso As Date, ByVal Docto_Ing As String, ByVal Cod_Tema As Integer) As LibroRow
            Dim rowLibroRow As LibroRow = CType(Me.NewRow,LibroRow)
            rowLibroRow.ItemArray = New Object() {Cod_Lib, Tit_Lib, Aut_Lib, NoPag_Lib, Edit_Lib, NoEdic_Lib, FechaIngreso, Docto_Ing, Cod_Tema}
            Me.Rows.Add(rowLibroRow)
            Return rowLibroRow
        End Function
        
        Public Function FindByCod_Lib(ByVal Cod_Lib As Integer) As LibroRow
            Return CType(Me.Rows.Find(New Object() {Cod_Lib}),LibroRow)
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As LibroDataTable = CType(MyBase.Clone,LibroDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New LibroDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnCod_Lib = Me.Columns("Cod_Lib")
            Me.columnTit_Lib = Me.Columns("Tit_Lib")
            Me.columnAut_Lib = Me.Columns("Aut_Lib")
            Me.columnNoPag_Lib = Me.Columns("NoPag_Lib")
            Me.columnEdit_Lib = Me.Columns("Edit_Lib")
            Me.columnNoEdic_Lib = Me.Columns("NoEdic_Lib")
            Me.columnFechaIngreso = Me.Columns("FechaIngreso")
            Me.columnDocto_Ing = Me.Columns("Docto_Ing")
            Me.columnCod_Tema = Me.Columns("Cod_Tema")
        End Sub
        
        Private Sub InitClass()
            Me.columnCod_Lib = New DataColumn("Cod_Lib", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnCod_Lib)
            Me.columnTit_Lib = New DataColumn("Tit_Lib", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnTit_Lib)
            Me.columnAut_Lib = New DataColumn("Aut_Lib", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnAut_Lib)
            Me.columnNoPag_Lib = New DataColumn("NoPag_Lib", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnNoPag_Lib)
            Me.columnEdit_Lib = New DataColumn("Edit_Lib", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnEdit_Lib)
            Me.columnNoEdic_Lib = New DataColumn("NoEdic_Lib", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnNoEdic_Lib)
            Me.columnFechaIngreso = New DataColumn("FechaIngreso", GetType(System.DateTime), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnFechaIngreso)
            Me.columnDocto_Ing = New DataColumn("Docto_Ing", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnDocto_Ing)
            Me.columnCod_Tema = New DataColumn("Cod_Tema", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnCod_Tema)
            Me.Constraints.Add(New UniqueConstraint("dsBibliotecaKey2", New DataColumn() {Me.columnCod_Lib}, true))
            Me.Constraints.Add(New UniqueConstraint("key1", New DataColumn() {Me.columnCod_Tema}, false))
            Me.columnCod_Lib.AllowDBNull = false
            Me.columnCod_Lib.Unique = true
            Me.columnTit_Lib.AllowDBNull = false
            Me.columnAut_Lib.AllowDBNull = false
            Me.columnNoPag_Lib.AllowDBNull = false
            Me.columnEdit_Lib.AllowDBNull = false
            Me.columnNoEdic_Lib.AllowDBNull = false
            Me.columnFechaIngreso.AllowDBNull = false
            Me.columnCod_Tema.AllowDBNull = false
            Me.columnCod_Tema.Unique = true
        End Sub
        
        Public Function NewLibroRow() As LibroRow
            Return CType(Me.NewRow,LibroRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New LibroRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(LibroRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.LibroRowChangedEvent) Is Nothing) Then
                RaiseEvent LibroRowChanged(Me, New LibroRowChangeEvent(CType(e.Row,LibroRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.LibroRowChangingEvent) Is Nothing) Then
                RaiseEvent LibroRowChanging(Me, New LibroRowChangeEvent(CType(e.Row,LibroRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.LibroRowDeletedEvent) Is Nothing) Then
                RaiseEvent LibroRowDeleted(Me, New LibroRowChangeEvent(CType(e.Row,LibroRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.LibroRowDeletingEvent) Is Nothing) Then
                RaiseEvent LibroRowDeleting(Me, New LibroRowChangeEvent(CType(e.Row,LibroRow), e.Action))
            End If
        End Sub
        
        Public Sub RemoveLibroRow(ByVal row As LibroRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class LibroRow
        Inherits DataRow
        
        Private tableLibro As LibroDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableLibro = CType(Me.Table,LibroDataTable)
        End Sub
        
        Public Property Cod_Lib As Integer
            Get
                Return CType(Me(Me.tableLibro.Cod_LibColumn),Integer)
            End Get
            Set
                Me(Me.tableLibro.Cod_LibColumn) = value
            End Set
        End Property
        
        Public Property Tit_Lib As String
            Get
                Return CType(Me(Me.tableLibro.Tit_LibColumn),String)
            End Get
            Set
                Me(Me.tableLibro.Tit_LibColumn) = value
            End Set
        End Property
        
        Public Property Aut_Lib As String
            Get
                Return CType(Me(Me.tableLibro.Aut_LibColumn),String)
            End Get
            Set
                Me(Me.tableLibro.Aut_LibColumn) = value
            End Set
        End Property
        
        Public Property NoPag_Lib As Integer
            Get
                Return CType(Me(Me.tableLibro.NoPag_LibColumn),Integer)
            End Get
            Set
                Me(Me.tableLibro.NoPag_LibColumn) = value
            End Set
        End Property
        
        Public Property Edit_Lib As String
            Get
                Return CType(Me(Me.tableLibro.Edit_LibColumn),String)
            End Get
            Set
                Me(Me.tableLibro.Edit_LibColumn) = value
            End Set
        End Property
        
        Public Property NoEdic_Lib As String
            Get
                Return CType(Me(Me.tableLibro.NoEdic_LibColumn),String)
            End Get
            Set
                Me(Me.tableLibro.NoEdic_LibColumn) = value
            End Set
        End Property
        
        Public Property FechaIngreso As Date
            Get
                Return CType(Me(Me.tableLibro.FechaIngresoColumn),Date)
            End Get
            Set
                Me(Me.tableLibro.FechaIngresoColumn) = value
            End Set
        End Property
        
        Public Property Docto_Ing As String
            Get
                Try 
                    Return CType(Me(Me.tableLibro.Docto_IngColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("No se puede obtener el valor porque es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableLibro.Docto_IngColumn) = value
            End Set
        End Property
        
        Public Property Cod_Tema As Integer
            Get
                Return CType(Me(Me.tableLibro.Cod_TemaColumn),Integer)
            End Get
            Set
                Me(Me.tableLibro.Cod_TemaColumn) = value
            End Set
        End Property
        
        Public Function IsDocto_IngNull() As Boolean
            Return Me.IsNull(Me.tableLibro.Docto_IngColumn)
        End Function
        
        Public Sub SetDocto_IngNull()
            Me(Me.tableLibro.Docto_IngColumn) = System.Convert.DBNull
        End Sub
        
        Public Function GetTemaRows() As TemaRow()
            Return CType(Me.GetChildRows(Me.Table.ChildRelations("LibroTema")),TemaRow())
        End Function
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class LibroRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As LibroRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As LibroRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As LibroRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
End Class
